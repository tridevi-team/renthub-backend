{
    "compilerOptions": {
        // Project options
        "allowJs": true, // Allow JavaScript files to be imported inside your project, instead of just .ts and .tsx files
        "declaration": false, // Generate .d.ts files for every TypeScript or JavaScript file inside your project
        "lib": ["es2019", "es2020", "es2021", "esnext"], // Specifies which default set of type definitions to use ("DOM", "ES6", etc)
        "module": "commonjs", // Sets the module system for the program. "CommonJS" for node projects.
        "noEmit": false, // Do not emit compiler output files like JavaScript source code, source-maps or declarations.
        "outDir": "./dist", // .js (as well as .d.ts, .js.map, etc.) files will be emitted into this directory
        "sourceMap": true, // Enables the generation of sourcemap files
        "target": "es2019", // Target environment

        "skipLibCheck": true, // Skip type checking of all declaration files (*.d.ts)

        // Module resolution
        "baseUrl": "./", // Sets a base directory to resolve non-absolute module names
        "esModuleInterop": true, // fixes some issues TS originally had with the ES6 spec where TypeScript treats CommonJS/AMD/UMD modules similar to ES6 module
        "moduleResolution": "node", // Pretty much always node for modern JS. Other option is "classic"
        "resolveJsonModule": true, // Include modules imported with .json extension
        "paths": {
            "@application/*": ["src/application/*"],
            "@domain/*": ["src/domain/*"],
            "@infrastructure/*": ["src/infrastructure/*"],
            "@presentation/*": ["src/presentation/*"],
            "@test/*": ["test/*"],
            "@/*": ["*"]
        }, // A series of entries which re-map imports to lookup locations relative to the baseUrl
        // "typeRoots": ["../node_modules/@types", "node_modules/@types", "src/types"],
        // Strict checks
        "strict": true, // Enable all strict type-checking options
        "allowUnreachableCode": false, // Pick up dead code paths
        "alwaysStrict": true, // Parse in strict mode and emit "use strict" for each source file
        "noImplicitAny": false, // Raise error on expressions and declarations with an implied 'any' type
        // "noImplicitThis": true, // Raise error on 'this' expressions with an implied 'any' type
        "strictFunctionTypes": true, // Enable strict checking of function types
        // "strictNullChecks": true, // Enable strict null checks
        "strictPropertyInitialization": false, // Enable strict checking of property initialization in classes

        // Linter Checks
        "noFallthroughCasesInSwitch": true, // Report errors for fallthrough cases in switch statement
        "noImplicitReturns": true, // Report error when not all code paths in function return a value
        "noUnusedLocals": true, // Report errors on unused local variables
        "noUnusedParameters": true, // Report errors on unused parameters
        "pretty": true // Stylize errors and messages using color and context
    },
    "exclude": ["node_modules", "dist"], // Specifies an array of filenames or patterns that should be skipped when resolving include
    "compileOnSave": false // Compile on save
}
