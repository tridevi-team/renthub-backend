openapi: "3.0.3"

info:
    title: Service API
    version: 1.0.0

tags:
    - name: Service
      description: Service API. This API is used to manage services in houses and rooms.

components:
    schemas:
        ServiceInfo:
            type: object
            properties:
                id:
                    type: string
                    default: "03fe3c83-4ce2-4e9b-9ebf-7f0264f184ea"
                houseId:
                    type: string
                    default: "695668a2-d7cc-4443-a472-ae2713f0005b"
                name:
                    type: string
                    default: "Điện"
                unitPrice:
                    type: number
                    default: 3500
                type:
                    type: string
                    default: "AMOUNT"
                hasIndex:
                    type: number
                    default: 1
                description:
                    type: string
                    default: null
                createdBy:
                    type: string
                    default: "108640a5-2929-44af-9ee7-7515089580dc"
                createdAt:
                    type: string
                    default: "2024-09-26T14:39:45.000Z"
                updatedBy:
                    type: string
                    default: null
                updatedAt:
                    type: string
                    default: "2024-09-26T14:39:45.000Z"
        GetServicesByHouseSuccess:
            type: object
            properties:
                success:
                    type: boolean
                    default: true
                code:
                    type: string
                    default: "GET_SERVICES_BY_HOUSE_SUCCESS"
                message:
                    type: string
                    default: "Services by house retrieved successfully"
                data:
                    type: object
                    properties:
                        results:
                            type: array
                            items:
                                $ref: "#/components/schemas/ServiceInfo"
                        total:
                            type: integer
                            example: 1
                        page:
                            type: integer
                            example: 1
                        pageCount:
                            type: integer
                            example: 1
                        pageSize:
                            type: integer
                            example: 10

        NoServicesFound:
            type: object
            properties:
                success:
                    type: boolean
                    default: false
                code:
                    type: string
                    default: "NO_SERVICES_FOUND"
                message:
                    type: string
                    default: "No services found"
                data:
                    type: object
                    example: {}

        GetServiceDetailsSuccess:
            type: object
            properties:
                success:
                    type: boolean
                    default: true
                code:
                    type: string
                    default: "GET_SERVICE_DETAILS_SUCCESS"
                message:
                    type: string
                    default: "Service details retrieved successfully"
                data:
                    $ref: "#/components/schemas/ServiceInfo"

        ServiceNotFound:
            type: object
            properties:
                success:
                    type: boolean
                    default: false
                code:
                    type: string
                    default: "SERVICE_NOT_FOUND"
                message:
                    type: string
                    default: "Service not found"
                data:
                    type: object
                    example: {}

        ServiceInfoInput:
            type: object
            properties:
                name:
                    type: string
                    default: "Điện"
                unitPrice:
                    type: number
                    default: 3500
                type:
                    type: string
                    default: "AMOUNT"
                hasIndex:
                    type: number
                    default: 1
                description:
                    type: string
                    default: null
            required:
                - name

        CreateServiceSuccess:
            type: object
            properties:
                success:
                    type: boolean
                    default: true
                code:
                    type: string
                    default: "CREATE_SERVICE_SUCCESS"
                message:
                    type: string
                    default: "Service created successfully"
                data:
                    $ref: "#/components/schemas/ServiceInfo"

        ServiceAlreadyExists:
            type: object
            properties:
                success:
                    type: boolean
                    default: false
                code:
                    type: string
                    default: "SERVICE_ALREADY_EXISTS"
                message:
                    type: string
                    default: "Service already exists"
                data:
                    type: object
                    example: {}

        UpdateServiceSuccess:
            type: object
            properties:
                success:
                    type: boolean
                    default: true
                code:
                    type: string
                    default: "UPDATE_SERVICE_SUCCESS"
                message:
                    type: string
                    default: "Service updated successfully"
                data:
                    $ref: "#/components/schemas/ServiceInfo"

        DeleteServiceSuccess:
            type: object
            properties:
                success:
                    type: boolean
                    default: true
                code:
                    type: string
                    default: "DELETE_SERVICE_SUCCESS"
                message:
                    type: string
                    default: "Service deleted successfully"
                data:
                    type: object
                    example: {}
        AddServiceToRoomRequest:
            type: object
            properties:
                services:
                    type: array
                    items:
                        type: object
                        properties:
                            serviceId:
                                type: string
                                example: "03fe3c83-4ce2-4e9b-9ebf-7f0264f184ea"
                            quantity:
                                type: number
                                example: 1
                            startIndex:
                                type: number
                                example: 1
                            description:
                                type: string
                                example: "Description for service"
                        required:
                            - serviceId

        AddServiceToRoomSuccess:
            type: object
            properties:
                success:
                    type: boolean
                    default: true
                code:
                    type: string
                    default: "CREATE_ROOM_SERVICE_SUCCESS"
                message:
                    type: string
                    default: Room service created successfully
                data:
                    type: object
                    example: {}

        DeleteRoomServiceSuccess:
            type: object
            properties:
                success:
                    type: boolean
                    default: true
                code:
                    type: string
                    default: "DELETE_ROOM_SERVICE_SUCCESS"
                message:
                    type: string
                    default: Room service deleted successfully
                data:
                    type: object
                    example: {}

paths:
    /services/{houseId}/create:
        post:
            tags:
                - Service
            summary: Create service in house
            description: This API allows to create a new service in a house.
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: houseId
                  required: true
                  description: House ID
                  schema:
                      type: string
                      example: "695668a2-d7cc-4443-a472-ae2713f0005b"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ServiceInfoInput"
            responses:
                "200":
                    description: Service created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CreateServiceSuccess"
                "400":
                    description: Validation error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ValidationError"
                "401":
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/TokenInvalid"
                                    - $ref: "#/components/schemas/TokenExpired"
                "409":
                    description: Service already exists
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ServiceAlreadyExists"

    /services/{houseId}/search:
        get:
            tags:
                - Service
            summary: Get services by house
            description: This API allows to get all services in a house.
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: houseId
                  required: true
                  description: House ID
                  schema:
                      type: string
                      example: "695668a2-d7cc-4443-a472-ae2713f0005b"
                - in: query
                  name: filter[]
                  description: Filter criteria array with field, operator, and value
                  required: false
                  style: deepObject
                  explode: true
                  schema:
                      type: array
                      items:
                          type: object
                          properties:
                              field:
                                  type: string
                                  example: "houses.name"
                                  description: "The field to apply the filter on, e.g. houses.name"
                              operator:
                                  type: string
                                  example: "ew"
                                  description: "The operator to apply (e.g., 'ew' for endsWith, 'eq' for equals, etc.)"
                              value:
                                  type: string
                                  example: "qui"
                                  description: "The value to filter by, e.g. 'qui'"
                - in: query
                  name: sort[]
                  description: Sort criteria array with field and order
                  required: false
                  style: deepObject
                  explode: true
                  schema:
                      type: array
                      items:
                          type: object
                          properties:
                              field:
                                  type: string
                                  example: "houses.name"
                                  description: "The field to apply the sort on, e.g. houses.name"
                              direction:
                                  type: string
                                  enum:
                                      - "asc"
                                      - "desc"
                                  example: "asc"
                                  description: "The order to sort by (asc or desc)"
                - in: query
                  name: page
                  schema:
                      type: integer
                      example: 1
                  description: Current page number
                  required: false
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                      example: 10
                  description: Number of items per page
                  required: false
            responses:
                "200":
                    description: Services by house retrieved successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetServicesByHouseSuccess"
                "404":
                    description: No services found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/NoServicesFound"

    /services/{serviceId}/details:
        get:
            tags:
                - Service
            summary: Get service details
            description: This API allows to get details of a service.
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: serviceId
                  required: true
                  description: Service ID
                  schema:
                      type: string
                      example: "03fe3c83-4ce2-4e9b-9ebf-7f0264f184ea"
            responses:
                "200":
                    description: Service details retrieved successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetServiceDetailsSuccess"
                "404":
                    description: Service not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ServiceNotFound"

    /services/{serviceId}/update:
        put:
            tags:
                - Service
            summary: Update service
            description: This API allows to update a service.
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: serviceId
                  required: true
                  description: Service ID
                  schema:
                      type: string
                      example: "03fe3c83-4ce2-4e9b-9ebf-7f0264f184ea"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ServiceInfoInput"
            responses:
                "200":
                    description: Service updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UpdateServiceSuccess"
                "400":
                    description: Validation error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ValidationError"
                "401":
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/TokenInvalid"
                                    - $ref: "#/components/schemas/TokenExpired"
                "404":
                    description: Service not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ServiceNotFound"

    /services/{serviceId}/delete:
        delete:
            tags:
                - Service
            summary: Delete service
            description: This API allows to delete a service.
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: serviceId
                  required: true
                  description: Service ID
                  schema:
                      type: string
                      example: "03fe3c83-4ce2-4e9b-9ebf-7f0264f184ea"
            responses:
                "200":
                    description: Service deleted successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DeleteServiceSuccess"
                "400":
                    description: Validation error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ValidationError"
                "401":
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/TokenInvalid"
                                    - $ref: "#/components/schemas/TokenExpired"
                "404":
                    description: Service not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ServiceNotFound"

    /services/{roomId}/add:
        post:
            tags:
                - Service
            summary: Add service to room
            description: This API allows to add a service to a room.
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: roomId
                  required: true
                  description: Room ID
                  schema:
                      type: string
                      example: "695668a2-d7cc-4443-a472-ae2713f0005b"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AddServiceToRoomRequest"
            responses:
                "200":
                    description: Room service created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AddServiceToRoomSuccess"
                "400":
                    description: Validation error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ValidationError"
                "401":
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/TokenInvalid"
                                    - $ref: "#/components/schemas/TokenExpired"
                "404":
                    description: Service not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ServiceNotFound"

    /services/{serviceId}/deleteRoomService:
        delete:
            tags:
                - Service
            summary: Delete room service
            description: This API allows to delete a service from a room.
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: serviceId
                  required: true
                  description: Service ID
                  schema:
                      type: string
                      example: "03fe3c83-4ce2-4e9b-9ebf-7f0264f184ea"
            responses:
                "200":
                    description: Room service deleted successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DeleteRoomServiceSuccess"
                "400":
                    description: Validation error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ValidationError"
                "401":
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/TokenInvalid"
                                    - $ref: "#/components/schemas/TokenExpired"
                "404":
                    description: Service not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/scomponents/schemas/ServiceNotFound"
